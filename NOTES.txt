Is Expr too restrictive?
Should we allow "Op" which is a wrapper around the thing?

Specifically, for lists and tuples: it's safe to decompose them as long as you
don't try to set the name or whatever.

Op [Expr (Tensor a)]


No, what we really want is one of the following:

[Expr t]
(OpDef -> OpDef) -> [Expr t]
etc.

ACTUALLY, this is kinda nice for tuples too!

(Expr t1, Expr t2)

:)

Of course, this means that every op is rendered for every list element.
But we can use observable sharing to get around that.
OK, just need to figure out a good API...

Yes, this makes more sense than before.  It makes a stronger case for
Expr vs Build.

What if you're stateful?

====
Unfortunately, the variadic is not great since there's no monad anymore...

===

BUT what about use in different name/device scopes?
Not sure.  Let's see how annoying it is in practice.

do
    v <- variable []    
    w <- variable []
    let (x,y) = someOpReturningAPair
    withNameScope "foo" $ assign v x
    withNameScope "bar" $ assign w x
    

yeah, that's not great.  Not sure what to do.
Maybe: CSE across name scopes?
And leave devices for now?
Or: go the reverse?  And say you're on your own when you try to do
this?

Also: you basically just shouldn't set scope/device for an Expr directly.



=====

TODO: explicit or implicit render?
